#set( $symbol_pound = '#' )
#set( $symbol_dollar = '$' )
#set( $symbol_escape = '\' )
${symbol_pound} The webRoot directory:
${symbol_pound} the directory that the servlet engine regards as the place where applications 
${symbol_pound} that use the servlet engine should be installed.  Generally, it is safe to leave
${symbol_pound} this at the default setting of __AUTODETECT__.  When the SmartClient server is
${symbol_pound} started, it logs a message to stdout telling you the autodetected path to your
${symbol_pound} webRoot.  If this path is not your actual webRoot, then you'll want to override
${symbol_pound} this config parameter here.
${symbol_pound}
${symbol_pound} Valid values: 
${symbol_pound}
${symbol_pound} 1. Absolute path to the webRoot directory
${symbol_pound}
${symbol_pound} 2. Special token:  __AUTODETECT__
${symbol_pound}    When this token is used, SmartClient attempts to auto-detect the webRoot using
${symbol_pound}    standard servlet APIs.  This may or may not work - depending on your
${symbol_pound}    container type and deployment type.  For example, WAR/EAR deployments
${symbol_pound}    on some containers never make it to disk, and so the container refuses
${symbol_pound}    to provide the webRoot path.
${symbol_pound}  
${symbol_pound}    If SmartClient cannnot detect the webRoot, it sets the webRoot to
${symbol_pound}    __USE_CONTAINER__ (see below).
${symbol_pound}
${symbol_pound} 3.  Special token: __USE_CONTAINER__
${symbol_pound}     When this token is used, SmartClient uses standard servet APIs for accessing
${symbol_pound}     filesystem resources.  This is slower than direct file access and, since
${symbol_pound}     the servlet APIs provide no mechanism for writing to disk, means that some
${symbol_pound}     development tools like the FileAssembler will not work.
${symbol_pound}
webRoot: __AUTODETECT__

${symbol_pound} Set this to the GWT module name.
gwtModuleName: ${module}

${symbol_pound} if you've moved the isomorphic directory from its default location in webRoot,
${symbol_pound} set the root-relative path to it here
${symbol_pound}
${symbol_pound} For example, if in your deployment the 'isomorphic' dir is in /foo/bar, then set
${symbol_pound} then you'll need to set this to foo/bar/isomorphic
isomorphicPathRootRelative: ${symbol_dollar}gwtModuleName/sc


${symbol_pound} -------------- PICK DATABASE TO USE --------------------
${symbol_pound}
${symbol_pound} The SmartClient SDK ships with examples that use a database as the persistence
${symbol_pound} layer.  By default, the SDK uses a built-in version of HSQLDB, but you can
${symbol_pound} specify a different database to use here.

${symbol_pound} which database do you want to use?  HSQLDB is enabled by default.
${symbol_pound}sql.defaultDatabase: HSQLDB

${symbol_pound} If you want to use Mysql instead, uncomment the following line
${symbol_pound} and comment all other sql.defaultDatabase definitions
${symbol_pound}sql.defaultDatabase: Mysql

${symbol_pound} If you want to use Oracle instead, uncomment the following line
${symbol_pound} and comment all other sql.defaultDatabase definitions
${symbol_pound}sql.defaultDatabase: Oracle

${symbol_pound} If you want to use Postgres instead, uncomment the following line
${symbol_pound} and comment all other sql.defaultDatabase definitions
${symbol_pound}sql.defaultDatabase: PostgreSQL

${symbol_pound} If you want to use DB2 instead, uncomment the following line
${symbol_pound} and comment all other sql.defaultDatabase definitions
${symbol_pound}sql.defaultDatabase: DB2

${symbol_pound} -------------- SETTINGS FOR ${module} --------------------

${symbol_pound} There's a pretend JNDI datasource setup for you in /WEB-INF/jetty-web.xml - modify it to suit your needs 
sql.defaultDatabase: ${module}Data
sql.${module}Data.driver.name: jdbc/${module}
sql.${module}Data.database.type: hsqldb
sql.${module}Data.interface.type: jndi

${symbol_pound} -------------- LOADING APP AND DATASOURCE DEFINITIONS --------------------

${symbol_pound} Where the system looks for DataSource definition files ([dataSourceId].ds.xml or
${symbol_pound} [dataSourceID].ds.js).  It's useful to put all your DataSources in one 
${symbol_pound} directory since DataSources are frequently shared between applications.  
${symbol_pound} "project.datasources" is also where the DataSource Importer tool looks 
${symbol_pound} for available DataSources.

project.datasources: ${symbol_dollar}webRoot/ds
project.ui: ${symbol_dollar}webRoot/shared/ui
project.apps: ${symbol_dollar}webRoot/shared/app

${symbol_pound} -------------- Other settings --------------------
${symbol_pound} The setting RPCManager.enabledBuiltinMethods enables or disables the BuiltInRPCs - RPC calls
${symbol_pound} that are built into the SmartClient Server.  The setting below reflects the framework default
${symbol_pound} of enabling only those RPCs that are typically needed in an application.
${symbol_pound} 
${symbol_pound} See the JavaDoc for com.isomorphic.rpc.BuiltinRPC and com.isomorphic.tools.BuiltinRPC for all
${symbol_pound} available builtinRPCs and their behavior.
${symbol_pound} 
${symbol_pound} Note that many of the BuiltinRPCs are designed for use by tools such as Visual Builder, and
${symbol_pound} provide services such as direct access to the file system (for load and save of screens) that
${symbol_pound} would be unsafe to expose to untrusted users.
${symbol_pound}
${symbol_pound}RPCManager.enabledBuiltinMethods: xmlToJS, uploadProgressCheck, exportClientData, downloadClientExport, setAttributes
RPCManager.enabledBuiltinMethods: * 